[{"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\index.js":"1","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\App.js":"2","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\reportWebVitals.js":"3","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\frontpage.js":"4","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\channel.js":"5","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\navbar.js":"6","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\client.js":"7","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\vod.js":"8","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\settings.js":"9","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\graph.js":"10","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\tooltip.js":"11"},{"size":547,"mtime":1611977563851,"results":"12","hashOfConfig":"13"},{"size":1312,"mtime":1611985336791,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":4741,"mtime":1612122946152,"results":"16","hashOfConfig":"13"},{"size":9082,"mtime":1612122978804,"results":"17","hashOfConfig":"13"},{"size":1820,"mtime":1612081207091,"results":"18","hashOfConfig":"13"},{"size":336,"mtime":1611980817480,"results":"19","hashOfConfig":"13"},{"size":26896,"mtime":1612127765559,"results":"20","hashOfConfig":"13"},{"size":19555,"mtime":1612125133380,"results":"21","hashOfConfig":"13"},{"size":1395,"mtime":1612127130036,"results":"22","hashOfConfig":"13"},{"size":1656,"mtime":1612123480354,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ov2v03",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\index.js",[],["49","50"],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\App.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\reportWebVitals.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\frontpage.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\channel.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\navbar.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\client.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\vod.js",[],"C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\settings.js",["51"],"import React, { useState } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  IconButton,\r\n  CircularProgress,\r\n  Box,\r\n  Modal,\r\n  Button,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport { Movie, Search, Equalizer, Theaters, GetApp } from \"@material-ui/icons\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\n\r\nexport default function Settings(props) {\r\n  const classes = useStyles();\r\n  const [start, setStart] = useState(\"00:00:00\");\r\n  const [showStartInput, setShowStartInput] = useState(false);\r\n  const [end, setEnd] = useState(\"00:00:00\");\r\n  const [showEndInput, setShowEndInput] = useState(false);\r\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\r\n  const [searchThreshold, setSearchThreshold] = useState(1);\r\n  const [messageThreshold, setMessageThreshold] = useState(5);\r\n  const [volumeThreshold, setVolumeThreshold] = useState(-40);\r\n  const { player, handleIntervalChange, interval } = props;\r\n\r\n  const handleStartInput = (evt) => {\r\n    setStart(evt.target.value);\r\n  };\r\n\r\n  const handleStartInputClick = () => {\r\n    setShowStartInput(true);\r\n  };\r\n\r\n  const handleLostFocusStartInput = () => {\r\n    if (!showStartInput) return;\r\n    setShowStartInput(false);\r\n  };\r\n\r\n  const getTimeStampForStart = () => {\r\n    if (!player) return;\r\n    setStart(moment.utc(player.getCurrentTime() * 1000).format(\"HH:mm:ss\"));\r\n  };\r\n\r\n  const handleEndInput = (evt) => {\r\n    setEnd(evt.target.value);\r\n  };\r\n\r\n  const handleEndInputClick = () => {\r\n    setShowEndInput(true);\r\n  };\r\n\r\n  const handleLostFocusEndInput = () => {\r\n    if (!showStartInput) return;\r\n    setShowEndInput(false);\r\n  };\r\n\r\n  const getTimeStampForEnd = () => {\r\n    if (!player) return;\r\n    setEnd(moment.utc(player.getCurrentTime() * 1000).format(\"HH:mm:ss\"));\r\n  };\r\n\r\n  const handleClip = () => {};\r\n\r\n  const handleShowSettingsModal = () => {\r\n    setShowSettingsModal(true);\r\n  };\r\n\r\n  const handleCloseSettingsModal = () => {\r\n    setShowSettingsModal(false);\r\n  };\r\n\r\n  const handleSearchThreshold = (evt) => {\r\n    setSearchThreshold(evt.target.value);\r\n    /*\r\n    if (this.timeout) clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(this.makeSearchGraph, 500);*/\r\n  };\r\n\r\n  const handleVolumeThreshold = (evt) => {\r\n    setVolumeThreshold(evt.target.value);\r\n    /*\r\n    if (this.timeout) clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(this.makeSearchGraph, 500);*/\r\n  };\r\n\r\n  const handleMessageThreshold = (evt) => {\r\n    setMessageThreshold(evt.target.value);\r\n    /*\r\n    if (this.timeout) clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(this.makeSearchGraph, 500);*/\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.border}>\r\n        <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <Box display=\"inline-flex\" position=\"relative\">\r\n            <div\r\n              className={classes.timeButton}\r\n              onClick={handleStartInputClick}\r\n              onBlur={handleLostFocusStartInput}\r\n            >\r\n              <div className={classes.timeLabel}>\r\n                <Typography variant=\"caption\" className={classes.timeLabelText}>\r\n                  Start\r\n                </Typography>\r\n              </div>\r\n              <div className={classes.timeInputDiv}>\r\n                <Box paddingLeft=\"1rem\" paddingRight=\"1rem\">\r\n                  {showStartInput ? (\r\n                    <input\r\n                      autoFocus={true}\r\n                      type=\"text\"\r\n                      className={`${classes.timeInput} ${classes.input}`}\r\n                      autoCapitalize=\"off\"\r\n                      autoCorrect=\"off\"\r\n                      autoComplete=\"off\"\r\n                      required={true}\r\n                      defaultValue={start}\r\n                      onChange={handleStartInput}\r\n                    />\r\n                  ) : (\r\n                    <Typography variant=\"caption\" className={classes.boldLabel}>\r\n                      {start}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n              </div>\r\n            </div>\r\n\r\n            <Box display=\"inline-flex\" position=\"relative\">\r\n              <div className={classes.buttonDiv}>\r\n                <button\r\n                  className={classes.button}\r\n                  onClick={getTimeStampForStart}\r\n                >\r\n                  <div className={classes.icon}>\r\n                    <figure className={classes.svg}>\r\n                      <svg\r\n                        className={classes.svgAsset}\r\n                        width=\"20px\"\r\n                        height=\"20px\"\r\n                        version=\"1.1\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        x=\"0px\"\r\n                        y=\"0px\"\r\n                      >\r\n                        <g>\r\n                          <path d=\"M18 17h-2v-2h2v2zM2 17h2V3H2v14zM10.5 12.5L9 11h6V9H9l1.5-1.5L9 6l-4 4 4 4 1.5-1.5zM16 13h2v-2h-2v2zM18 9h-2V7h2v2zM16 5h2V3h-2v2z\"></path>\r\n                        </g>\r\n                      </svg>\r\n                    </figure>\r\n                  </div>\r\n                </button>\r\n              </div>\r\n            </Box>\r\n\r\n            <div\r\n              className={classes.timeButton}\r\n              onClick={handleEndInputClick}\r\n              onBlur={handleLostFocusEndInput}\r\n            >\r\n              <div className={classes.timeLabel}>\r\n                <Typography variant=\"caption\" className={classes.timeLabelText}>\r\n                  End\r\n                </Typography>\r\n              </div>\r\n              <div className={classes.timeInputDiv}>\r\n                <Box paddingLeft=\"1rem\" paddingRight=\"1rem\">\r\n                  {showEndInput ? (\r\n                    <input\r\n                      autoFocus={true}\r\n                      type=\"text\"\r\n                      className={`${classes.timeInput} ${classes.input}`}\r\n                      autoCapitalize=\"off\"\r\n                      autoCorrect=\"off\"\r\n                      autoComplete=\"off\"\r\n                      required={true}\r\n                      defaultValue={end}\r\n                      onChange={handleEndInput}\r\n                    />\r\n                  ) : (\r\n                    <Typography variant=\"caption\" className={classes.boldLabel}>\r\n                      {end}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n              </div>\r\n            </div>\r\n\r\n            <Box display=\"inline-flex\" position=\"relative\">\r\n              <div className={classes.buttonDiv}>\r\n                <button className={classes.button} onClick={getTimeStampForEnd}>\r\n                  <div className={classes.icon}>\r\n                    <figure className={classes.svg}>\r\n                      <svg\r\n                        className={classes.svgAsset}\r\n                        width=\"20px\"\r\n                        height=\"20px\"\r\n                        version=\"1.1\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        x=\"0px\"\r\n                        y=\"0px\"\r\n                      >\r\n                        <g>\r\n                          <path d=\"M2 3h2v2H2V3zM18 3h-2v14h2V3zM9.5 7.5L11 9H5v2h6l-1.5 1.5L11 14l4-4-4-4-1.5 1.5zM4 7H2v2h2V7zM2 11h2v2H2v-2zM4 15H2v2h2v-2z\"></path>\r\n                        </g>\r\n                      </svg>\r\n                    </figure>\r\n                  </div>\r\n                </button>\r\n              </div>\r\n            </Box>\r\n\r\n            <Box display=\"inline-flex\" position=\"relative\">\r\n              <div className={classes.buttonDiv}>\r\n                <IconButton className={classes.button} onClick={handleClip}>\r\n                  <Movie className={classes.svgAsset} />\r\n                </IconButton>\r\n              </div>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box className={classes.divider} />\r\n        <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <Box display=\"inline-flex\" position=\"relative\">\r\n            <div className={classes.buttonDiv}>\r\n              <IconButton\r\n                disabled={props.clipsData ? false : true}\r\n                className={classes.button}\r\n                onClick={null}\r\n              >\r\n                <Theaters className={classes.svgAsset} />\r\n              </IconButton>\r\n            </div>\r\n          </Box>\r\n          <Box display=\"inline-flex\" position=\"relative\">\r\n            <div className={classes.buttonDiv}>\r\n              <IconButton\r\n                disabled={props.volumeData ? false : true}\r\n                className={classes.button}\r\n                onClick={null}\r\n              >\r\n                <Equalizer className={classes.svgAsset} />\r\n              </IconButton>\r\n            </div>\r\n          </Box>\r\n          <Box display=\"inline-flex\" position=\"relative\">\r\n            <div className={classes.buttonDiv}>\r\n              <IconButton className={classes.button} onClick={null}>\r\n                <Search className={classes.svgAsset} />\r\n              </IconButton>\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n        <Box className={classes.divider} />\r\n        <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <Box display=\"inline-flex\" position=\"relative\">\r\n            <div className={classes.buttonDiv}>\r\n              <IconButton\r\n                className={classes.button}\r\n                onClick={handleShowSettingsModal}\r\n              >\r\n                <SettingsIcon className={classes.svgAsset} />\r\n              </IconButton>\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n        <Modal open={showSettingsModal} onClose={handleCloseSettingsModal}>\r\n          <div className={`${classes.modalContent} ${classes.modal}`}>\r\n            <div style={{ width: \"40rem\", height: \"30rem\" }}>\r\n              <Box\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                p={1}\r\n              >\r\n                <Typography className={classes.modalHeader} variant=\"h3\">\r\n                  Settings\r\n                </Typography>\r\n              </Box>\r\n              <Box display=\"flex\" marginTop=\"2rem\">\r\n                <div style={{ marginLeft: \"2rem\" }}>\r\n                  <Button\r\n                    className={classes.settingsButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={null}\r\n                  >\r\n                    Download Whole Vod\r\n                  </Button>\r\n                </div>\r\n                <div style={{ marginLeft: \"2rem\" }}>\r\n                  <Box width=\"5rem\">\r\n                    <TextField\r\n                      inputProps={{\r\n                        style: {\r\n                          backgroundColor: \"hsla(0,0%,100%,.15)\",\r\n                          color: \"#efeff1\",\r\n                          paddingLeft: \"0.1rem\",\r\n                          paddingRight: \"0.1rem\",\r\n                          textAlign: \"center\",\r\n                        },\r\n                      }}\r\n                      InputLabelProps={{\r\n                        style: { color: \"#fff\", textAlign: \"center\" },\r\n                      }}\r\n                      type=\"number\"\r\n                      min={1}\r\n                      variant=\"standard\"\r\n                      margin=\"none\"\r\n                      label=\"Search Threshold\"\r\n                      fullWidth\r\n                      defaultValue={searchThreshold}\r\n                      onChange={handleSearchThreshold}\r\n                    />\r\n                  </Box>\r\n                </div>\r\n                <div style={{ marginLeft: \"2rem\" }}>\r\n                  <Box width=\"5rem\">\r\n                    <TextField\r\n                      inputProps={{\r\n                        style: {\r\n                          backgroundColor: \"hsla(0,0%,100%,.15)\",\r\n                          color: \"#efeff1\",\r\n                          paddingLeft: \"0.1rem\",\r\n                          paddingRight: \"0.1rem\",\r\n                          textAlign: \"center\",\r\n                        },\r\n                      }}\r\n                      InputLabelProps={{\r\n                        style: { color: \"#fff\", textAlign: \"center\" },\r\n                      }}\r\n                      type=\"number\"\r\n                      min={-200}\r\n                      max={200}\r\n                      disabled={props.volumeData ? false : true}\r\n                      variant=\"standard\"\r\n                      margin=\"none\"\r\n                      label=\"Volume Threshold\"\r\n                      fullWidth\r\n                      defaultValue={volumeThreshold}\r\n                      onChange={handleVolumeThreshold}\r\n                    />\r\n                  </Box>\r\n                </div>\r\n                <div style={{ marginLeft: \"2rem\" }}>\r\n                  <Box width=\"5rem\">\r\n                    <TextField\r\n                      inputProps={{\r\n                        style: {\r\n                          backgroundColor: \"hsla(0,0%,100%,.15)\",\r\n                          color: \"#efeff1\",\r\n                          paddingLeft: \"0.1rem\",\r\n                          paddingRight: \"0.1rem\",\r\n                          textAlign: \"center\",\r\n                          \"&:disabled\": {\r\n                            cursor: \"not-allowed\",\r\n                            pointerEvents: \"all\",\r\n                          },\r\n                        },\r\n                      }}\r\n                      InputLabelProps={{\r\n                        style: { color: \"#fff\", textAlign: \"center\" },\r\n                      }}\r\n                      type=\"number\"\r\n                      min={1}\r\n                      variant=\"standard\"\r\n                      margin=\"none\"\r\n                      label=\"Message Threshold\"\r\n                      fullWidth\r\n                      defaultValue={messageThreshold}\r\n                      onChange={handleMessageThreshold}\r\n                    />\r\n                  </Box>\r\n                </div>\r\n                <div style={{ marginLeft: \"2rem\" }}>\r\n                  <Box width=\"5rem\">\r\n                    <TextField\r\n                      inputProps={{\r\n                        style: {\r\n                          backgroundColor: \"hsla(0,0%,100%,.15)\",\r\n                          color: \"#efeff1\",\r\n                          paddingLeft: \"0.1rem\",\r\n                          paddingRight: \"0.1rem\",\r\n                          textAlign: \"center\",\r\n                          \"&:disabled\": {\r\n                            cursor: \"not-allowed\",\r\n                            pointerEvents: \"all\",\r\n                          },\r\n                        },\r\n                      }}\r\n                      InputLabelProps={{\r\n                        style: { color: \"#fff\", textAlign: \"center\" },\r\n                      }}\r\n                      type=\"number\"\r\n                      min={1}\r\n                      variant=\"standard\"\r\n                      margin=\"none\"\r\n                      label=\"Interval\"\r\n                      fullWidth\r\n                      defaultValue={interval}\r\n                      onChange={handleIntervalChange}\r\n                    />\r\n                  </Box>\r\n                </div>\r\n              </Box>\r\n              <Box display=\"flex\" marginTop=\"2rem\">\r\n                <div style={{ marginLeft: \"2rem\", display: \"flex\" }}>\r\n                  <div className={classes.labelDiv}>\r\n                    <Typography\r\n                      className={classes.settingsLabel}\r\n                      variant=\"body2\"\r\n                    >\r\n                      Test\r\n                    </Typography>\r\n                  </div>\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <IconButton className={classes.button} onClick={null}>\r\n                      <GetApp className={classes.svgAsset} />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              </Box>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    boxShadow:\r\n      \"0 2px 4px -1px rgba(0,0,0,.3411764705882353), 0 2px 2px -2px rgba(0,0,0,.26), 0 1px 4px 0 rgba(0,0,0,.28)\",\r\n    marginTop: \"0.5rem\",\r\n  },\r\n  border: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"row\",\r\n    borderLeft: \"1px solid hsla(0,0%,100%,.1)\",\r\n    borderTop: \"1px solid hsla(0,0%,100%,.1)\",\r\n    borderRight: \"1px solid hsla(0,0%,100%,.1)\",\r\n    borderBottom: \"1px solid hsla(0,0%,100%,.1)\",\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n  },\r\n  timeButton: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n    paddingLeft: \"0.5rem\",\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  timeLabel: {\r\n    marginRight: \"0.5rem\",\r\n  },\r\n  timeInputDiv: {\r\n    width: \"5.6rem\",\r\n    display: \"inline-flex\",\r\n  },\r\n  timeLabelText: {\r\n    lineHeight: \"1.3\",\r\n    color: \"#868686\",\r\n    marginTop: \"12px\",\r\n    marginBottom: \"12px\",\r\n  },\r\n  boldLabel: {\r\n    fontWeight: \"600\",\r\n    marginTop: \"12px\",\r\n    marginBottom: \"12px\",\r\n  },\r\n  timeInput: {\r\n    borderBottomLeftRadius: \"4px\",\r\n    borderTopRightRadius: \"4px\",\r\n    borderBottomRightRadius: \"4px\",\r\n    borderTopLeftRadius: \"4px\",\r\n    textAlign: \"center\",\r\n    width: \"100%\",\r\n    display: \"block\",\r\n    fontFamily: \"inherit\",\r\n  },\r\n  input: {\r\n    appearance: \"none\",\r\n    backgroundClip: \"padding-box\",\r\n    backgroundColor: \"inherit\",\r\n    border: \"2px solid rgba(0,0,0,.05)\",\r\n    color: \"#efeff1\",\r\n    height: \"1.6rem\",\r\n    lineHeight: \"1.3\",\r\n    transition:\r\n      \"box-shadow .1s ease-in,border .1s ease-in,background-color .1s ease-in\",\r\n    transitionProperty: \"box-shadow,border,background-color\",\r\n    transitionDuration: \".1s,.1s,.1s\",\r\n    transitionTimingFunction: \"ease-in,ease-in,ease-in\",\r\n    transitionDelay: \"0s,0s,0s\",\r\n    \"&:focus\": {\r\n      backgroundColor: \"rgb(14 14 14/1)\",\r\n      borderColor: \"#2079ff\",\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  buttonDiv: {\r\n    borderRight: \"1px solid hsla(0,0%,100%,.1)\",\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    display: \"block\",\r\n    color: \"inherit\",\r\n    background: \"0 0\",\r\n    borderRadius: \"0\",\r\n    font: \"inherit\",\r\n    textAlign: \"inherit\",\r\n    border: \"none\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"hsl(0 0% 100%/.2)\",\r\n    },\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n    \"&:disabled\": {\r\n      cursor: \"not-allowed\",\r\n      pointerEvents: \"all\",\r\n    },\r\n    cursor: \"pointer\",\r\n  },\r\n  icon: {\r\n    height: \"2rem\",\r\n    width: \"2rem\",\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  svg: {\r\n    display: \"inline-flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  svgAsset: {\r\n    fill: \"#2079ff\",\r\n  },\r\n  divider: {\r\n    flexGrow: \"4\",\r\n    borderRight: \"1px solid hsla(0,0%,100%,.1)\",\r\n  },\r\n  modalContent: {\r\n    position: \"absolute\",\r\n    backgroundColor: \"rgb(14 14 14 / 1)\",\r\n    outline: \"none\",\r\n  },\r\n  modal: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n  modalHeader: {\r\n    marginTop: \"0.5rem\",\r\n    color: \"#fff\",\r\n    fontWeight: \"600\",\r\n  },\r\n  settingsLabel: {\r\n    color: \"#fff\",\r\n    fontWeight: \"600\",\r\n  },\r\n  labelDiv: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  settingsButton: {\r\n    height: \"100%\",\r\n  },\r\n}));\r\n","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\graph.js",["52","53","54","55","56","57","58","59"],"import React, { useState } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  IconButton,\r\n  CircularProgress,\r\n  Box,\r\n  Modal,\r\n  Button,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Line,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Brush,\r\n} from \"recharts\";\r\nimport CustomTooltip from \"./tooltip\";\r\n\r\nexport default function Graph(props) {\r\n  const classes = useStyles();\r\n  const { data, handleChartClick } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <ResponsiveContainer width=\"99%\" height=\"98%\">\r\n          <LineChart data={data} onClick={handleChartClick}>\r\n            <XAxis dataKey=\"duration\" />\r\n            <YAxis />\r\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n            <Brush dataKey=\"duration\" stroke=\"#8884d8\" />\r\n            <Line type=\"monotone\" dataKey=\"messages\" stroke=\"#8884d8\" />\r\n            <Tooltip content={<CustomTooltip />} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  loading: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100%\",\r\n  },\r\n  root: {\r\n    flex: 1,\r\n    marginTop: \"0.5rem\",\r\n    marginLeft: \"-1.5rem\",\r\n  },\r\n  graphRoot: {\r\n    marginTop: \"0.5rem\",\r\n    marginLeft: \"-2rem\",\r\n    height:\"100%\"\r\n  },\r\n}));\r\n","C:\\Users\\Overpowered\\Desktop\\hype-electron\\src\\tooltip.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":6,"column":3,"nodeType":"66","messageId":"67","endLine":6,"endColumn":19},{"ruleId":"64","severity":1,"message":"68","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":25},{"ruleId":"64","severity":1,"message":"69","line":4,"column":3,"nodeType":"66","messageId":"67","endLine":4,"endColumn":13},{"ruleId":"64","severity":1,"message":"70","line":5,"column":3,"nodeType":"66","messageId":"67","endLine":5,"endColumn":13},{"ruleId":"64","severity":1,"message":"65","line":6,"column":3,"nodeType":"66","messageId":"67","endLine":6,"endColumn":19},{"ruleId":"64","severity":1,"message":"71","line":7,"column":3,"nodeType":"66","messageId":"67","endLine":7,"endColumn":6},{"ruleId":"64","severity":1,"message":"72","line":8,"column":3,"nodeType":"66","messageId":"67","endLine":8,"endColumn":8},{"ruleId":"64","severity":1,"message":"73","line":9,"column":3,"nodeType":"66","messageId":"67","endLine":9,"endColumn":9},{"ruleId":"64","severity":1,"message":"74","line":10,"column":3,"nodeType":"66","messageId":"67","endLine":10,"endColumn":12},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'CircularProgress' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Typography' is defined but never used.","'IconButton' is defined but never used.","'Box' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","no-global-assign","no-unsafe-negation"]